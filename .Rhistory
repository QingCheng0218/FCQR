b0 <- 1;
zid <- 3:98;
cid <- 2;
msid <- 1;
gid <- 99;
gn <- 20
norder <- 4;
grd <- seq(0.1, 0.9, 0.005/5)
# eleq function find the position of specified elements.(which function doesn't  work)
eleq <- Vectorize(function(x, y) {isTRUE(all.equal(x, y))})
qv <- c(which(eleq(0.2, grd)), which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)), which(eleq(0.8, grd)))
lgrd <- length(grd)
msdata <- MSdata;
# -----------------------------------------------------
#*****************************************************#
# using GACV method to determine optimal nbasis
CBA <- c(1, 2, 3, 4, 5)
BICR <- AICR <- GACVR <- matrix(0, ncol=length(CBA), nrow=lgrd)
NBS <- rep(0,length(CBA))
n <- dim(MSdata)[1]
cn <- (log(n))^(1/2)
for(i in 1:length(CBA)){
cba <- CBA[i]
res <- predfun(MSdata, a0, b0, gn, time, norder, cba)
TM <- res$TM
DEL <- res$DEL;
nbasis <- res$nbasis
ns <- nbasis+1
n <- dim(MSdata)[1]
pre.y <- res$pre.y
bicres <- bicfun(n, ns, cn, TM, pre.y, DEL)
GACVR[, i] <- bicres$gacv;
AICR[, i] <- bicres$aic
BICR[, i] <- bicres$bic;
NBS[i] <- nbasis
}
# integration result
optfun <- function(grd, BICR){
de.tau <- diff(grd)[1]
bic.in <- apply(BICR*de.tau, 2, sum);
bic.in;
rank(bic.in)
interes <- paste(round(bic.in,5),"(",rank(bic.in),")", seq="")
# BIC for each tau
aa <- BICR
# aa <- BICR[,2:5]
bb <- apply(aa, 1, function(x){return(which.min(x))})
tauopt <- rep(0, length(CBA))
for(i in 1:length(CBA)){
tauopt[i] <- sum(bb==CBA[i])
}
res <- rbind(NBS, interes, tauopt)
return(res)
}
bicres <- optfun(grd, BICR);
aicres <- optfun(grd, AICR);
gacvres <- optfun(grd, GACVR);
res1 <- rbind(gacvres[2, ], bicres[2, ], aicres[2, ]);
res2 <- rbind(gacvres[3, ], bicres[3, ], aicres[3, ]);
res1
# res2
rm(list=ls(all=TRUE))
library(FCQR);
# --------------------------------------------------
library(imputeTS); library(survival); library(survminer); library(fda);
library(quantreg); library(statmod); library(xtable) library(Cairo)
# --------------------------------------------------
predfun <- function(msdata, a0, b0, gn, time, norder, cba){
# predict value: exp(b^t x)
del <- msdata[, 2]
DEL <- matrix(rep(del, lgrd), ncol = lgrd);
covres <- intzfun0(msdata, a0, b0, gn, time, norder, cba)
nbasis <- covres$nbasis
covdata <- covres$covdata;
Z <- covres$Z;
valueBasisT <- covres$valueBasisT
# weight0 <- weifun(msdata, covdata);
weight0 <- rep(1, nrow(msdata))
coefres <- coeffun0(valueBasisT, covdata,  msdata, grd, qv, weight0, Z, time)
T <- coefres$T
TM <- matrix(rep(T, lgrd), ncol = lgrd);
pre.y <- coefres$pre.y
return(list(pre.y=pre.y, TM = TM, DEL = DEL, nbasis = nbasis));
}
a0 <- 0;
b0 <- 1;
zid <- 3:98;
cid <- 2;
msid <- 1;
gid <- 99;
gn <- 20
norder <- 4;
grd <- seq(0.1, 0.9, 0.005/5)
# eleq function find the position of specified elements.(which function doesn't  work)
eleq <- Vectorize(function(x, y) {isTRUE(all.equal(x, y))})
qv <- c(which(eleq(0.2, grd)), which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)), which(eleq(0.8, grd)))
lgrd <- length(grd)
msdata <- MSdata;
# -----------------------------------------------------
#*****************************************************#
# using GACV method to determine optimal nbasis
CBA <- c(1, 2, 3, 4, 5)
BICR <- AICR <- GACVR <- matrix(0, ncol=length(CBA), nrow=lgrd)
NBS <- rep(0,length(CBA))
n <- dim(MSdata)[1]
cn <- (log(n))^(1/2)
for(i in 1:length(CBA)){
cba <- CBA[i]
res <- predfun(MSdata, a0, b0, gn, time, norder, cba)
TM <- res$TM
DEL <- res$DEL;
nbasis <- res$nbasis
ns <- nbasis+1
n <- dim(MSdata)[1]
pre.y <- res$pre.y
bicres <- bicfun(n, ns, cn, TM, pre.y, DEL, grd)
GACVR[, i] <- bicres$gacv;
AICR[, i] <- bicres$aic
BICR[, i] <- bicres$bic;
NBS[i] <- nbasis
}
# integration result
optfun <- function(grd, BICR){
de.tau <- diff(grd)[1]
bic.in <- apply(BICR*de.tau, 2, sum);
bic.in;
rank(bic.in)
interes <- paste(round(bic.in,5),"(",rank(bic.in),")", seq="")
# BIC for each tau
aa <- BICR
# aa <- BICR[,2:5]
bb <- apply(aa, 1, function(x){return(which.min(x))})
tauopt <- rep(0, length(CBA))
for(i in 1:length(CBA)){
tauopt[i] <- sum(bb==CBA[i])
}
res <- rbind(NBS, interes, tauopt)
return(res)
}
rm(list=ls(all=TRUE))
library(FCQR);
# --------------------------------------------------
library(imputeTS); library(survival); library(survminer); library(fda);
library(quantreg); library(statmod); library(xtable) library(Cairo)
# --------------------------------------------------
predfun <- function(msdata, a0, b0, gn, time, norder, cba){
# predict value: exp(b^t x)
del <- msdata[, 2]
DEL <- matrix(rep(del, lgrd), ncol = lgrd);
covres <- intzfun0(msdata, a0, b0, gn, time, norder, cba)
nbasis <- covres$nbasis
covdata <- covres$covdata;
Z <- covres$Z;
valueBasisT <- covres$valueBasisT
# weight0 <- weifun(msdata, covdata);
weight0 <- rep(1, nrow(msdata))
coefres <- coeffun0(valueBasisT, covdata,  msdata, grd, qv, weight0, Z, time)
T <- coefres$T
TM <- matrix(rep(T, lgrd), ncol = lgrd);
pre.y <- coefres$pre.y
return(list(pre.y=pre.y, TM = TM, DEL = DEL, nbasis = nbasis));
}
a0 <- 0;
b0 <- 1;
zid <- 3:98;
cid <- 2;
msid <- 1;
gid <- 99;
gn <- 20
norder <- 4;
grd <- seq(0.1, 0.9, 0.005/5)
# eleq function find the position of specified elements.(which function doesn't  work)
eleq <- Vectorize(function(x, y) {isTRUE(all.equal(x, y))})
qv <- c(which(eleq(0.2, grd)), which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)), which(eleq(0.8, grd)))
lgrd <- length(grd)
msdata <- MSdata;
# -----------------------------------------------------
#*****************************************************#
# using GACV method to determine optimal nbasis
CBA <- c(1, 2, 3, 4, 5)
BICR <- AICR <- GACVR <- matrix(0, ncol=length(CBA), nrow=lgrd)
NBS <- rep(0,length(CBA))
n <- dim(MSdata)[1]
cn <- (log(n))^(1/2)
for(i in 1:length(CBA)){
cba <- CBA[i]
res <- predfun(MSdata, a0, b0, gn, time, norder, cba)
TM <- res$TM
DEL <- res$DEL;
nbasis <- res$nbasis
ns <- nbasis+1
n <- dim(MSdata)[1]
pre.y <- res$pre.y
bicres <- bicfun(n, ns, cn, TM, pre.y, DEL, grd)
GACVR[, i] <- bicres$gacv;
AICR[, i] <- bicres$aic
BICR[, i] <- bicres$bic;
NBS[i] <- nbasis
}
# integration result
optfun <- function(grd, BICR){
de.tau <- diff(grd)[1]
bic.in <- apply(BICR*de.tau, 2, sum);
bic.in;
rank(bic.in)
interes <- paste(round(bic.in,5),"(",rank(bic.in),")", seq="")
# BIC for each tau
aa <- BICR
# aa <- BICR[,2:5]
bb <- apply(aa, 1, function(x){return(which.min(x))})
tauopt <- rep(0, length(CBA))
for(i in 1:length(CBA)){
tauopt[i] <- sum(bb==CBA[i])
}
res <- rbind(NBS, interes, tauopt)
return(res)
}
bicres <- optfun(grd, BICR);
aicres <- optfun(grd, AICR);
gacvres <- optfun(grd, GACVR);
res1 <- rbind(gacvres[2, ], bicres[2, ], aicres[2, ]);
res2 <- rbind(gacvres[3, ], bicres[3, ], aicres[3, ]);
res1
# integration result
optfun <- function(grd, BICR){
de.tau <- diff(grd)[1]
bic.in <- apply(BICR*de.tau, 2, sum);
bic.in;
rank(bic.in)
# interes <- paste(round(bic.in,5),"(",rank(bic.in),")", seq="")
interes <- round(bic.in,5);
# BIC for each tau
aa <- BICR
# aa <- BICR[,2:5]
bb <- apply(aa, 1, function(x){return(which.min(x))})
tauopt <- rep(0, length(CBA))
for(i in 1:length(CBA)){
tauopt[i] <- sum(bb==CBA[i])
}
res <- rbind(NBS, interes, tauopt)
return(res)
}
bicres <- optfun(grd, BICR);
aicres <- optfun(grd, AICR);
gacvres <- optfun(grd, GACVR);
res1 <- rbind(gacvres[2, ], bicres[2, ], aicres[2, ]);
res2 <- rbind(gacvres[3, ], bicres[3, ], aicres[3, ]);
res1
rm(list=ls(all=TRUE))
library(FCQR);
# --------------------------------------------------
library(imputeTS); library(survival); library(survminer); library(fda);
library(quantreg); library(statmod); library(xtable) library(Cairo)
# --------------------------------------------------
a0 <- 0; b0 <- 1; gn <- 20;
zid <- 3:98;
# cid <- 2;
# msid <- 1;
# gid <- 99;
norder <- 4;
grd <- seq(0.1, 0.9, 0.005/5);
qv <- c(which(eleq(0.2, grd)), which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)), which(eleq(0.8, grd)));
lgrd <- length(grd);
msdata <- MSdata;
# -----------------------------------------------------
#*****************************************************#
# using GACV method to determine optimal nbasis
CBA <- c(1, 2, 3, 4, 5)
BICR <- AICR <- GACVR <- matrix(0, ncol=length(CBA), nrow=lgrd)
NBS <- rep(0,length(CBA))
n <- dim(MSdata)[1]
cn <- (log(n))^(1/2)
for(i in 1:length(CBA)){
cba <- CBA[i];
res <- predfun(MSdata, a0, b0, gn, time, norder, cba);
TM <- res$TM;
DEL <- res$DEL;
nbasis <- res$nbasis;
ns <- nbasis+1;
n <- dim(MSdata)[1];
pre.y <- res$pre.y;
bicres <- bicfun(n, ns, cn, TM, pre.y, DEL);
GACVR[, i] <- bicres$gacv;
AICR[, i] <- bicres$aic;
BICR[, i] <- bicres$bic;
NBS[i] <- nbasis;
}
bicres <- optfun(grd, BICR);
gacvres <- optfun(grd, GACVR);
res1 <- rbind(gacvres[2, ], bicres[2, ]);
res1
# using GACV method to determine optimal nbasis
CBA <- c(1, 2, 3, 4, 5)
BICR <- AICR <- GACVR <- matrix(0, ncol=length(CBA), nrow=lgrd)
NBS <- rep(0,length(CBA))
n <- dim(MSdata)[1]
cn <- (log(n))^(1/2)
for(i in 1:length(CBA)){
cba <- CBA[i];
res <- predfun(MSdata, a0, b0, gn, time, norder, cba);
TM <- res$TM;
DEL <- res$DEL;
nbasis <- res$nbasis;
ns <- nbasis+1;
n <- dim(MSdata)[1];
pre.y <- res$pre.y;
bicres <- bicfun(n, ns, cn, TM, pre.y, DEL, grd);
GACVR[, i] <- bicres$gacv;
AICR[, i] <- bicres$aic;
BICR[, i] <- bicres$bic;
NBS[i] <- nbasis;
}
bicres <- optfun(grd, BICR);
gacvres <- optfun(grd, GACVR);
res1 <- rbind(gacvres[2, ], bicres[2, ]);
res1
# using GACV method to determine optimal nbasis
CBA <- c(1, 2, 3, 4, 5)
BICR <- GACVR <- matrix(0, ncol=length(CBA), nrow=lgrd)
NBS <- rep(0,length(CBA))
n <- dim(MSdata)[1]
cn <- (log(n))^(1/2)
for(i in 1:length(CBA)){
cba <- CBA[i];
res <- predfun(MSdata, a0, b0, gn, time, norder, cba);
TM <- res$TM;
DEL <- res$DEL;
nbasis <- res$nbasis;
ns <- nbasis+1;
n <- dim(MSdata)[1];
pre.y <- res$pre.y;
bicres <- bicfun(n, ns, cn, TM, pre.y, DEL, grd);
GACVR[, i] <- bicres$gacv;
BICR[, i] <- bicres$bic;
NBS[i] <- nbasis;
}
rm(list=ls());
library(FCQR);
# --------------------------------------------------
library(imputeTS); library(survival); library(survminer); library(fda);
library(quantreg); library(statmod); library(xtable) library(Cairo)
# --------------------------------------------------
a0 <- 0; b0 <- 1; gn <- 20;
norder <- 4;
grd <- seq(0.1, 0.9, 0.005/5);
qv <- c(which(eleq(0.2, grd)), which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)), which(eleq(0.8, grd)));
lgrd <- length(grd);
# msdata <- MSdata;
# -----------------------------------------------------
#*****************************************************#
# using GACV method to determine optimal nbasis
CBA <- c(1, 2, 3, 4, 5)
BICR <- GACVR <- matrix(0, ncol=length(CBA), nrow=lgrd)
NBS <- rep(0,length(CBA))
n <- dim(MSdata)[1]
cn <- (log(n))^(1/2)
for(i in 1:length(CBA)){
cba <- CBA[i];
res <- predfun(MSdata, a0, b0, gn, time, norder, cba);
TM <- res$TM;
DEL <- res$DEL;
nbasis <- res$nbasis;
ns <- nbasis+1;
n <- dim(MSdata)[1];
pre.y <- res$pre.y;
bicres <- bicfun(n, ns, cn, TM, pre.y, DEL, grd);
GACVR[, i] <- bicres$gacv;
BICR[, i] <- bicres$bic;
NBS[i] <- nbasis;
}
bicres <- optfun(grd, BICR);
gacvres <- optfun(grd, GACVR);
res1 <- rbind(gacvres[2, ], bicres[2, ]);
res1
rm(list=ls());
library(FCQR);
# --------------------------------------------------
library(imputeTS); library(survival); library(survminer); library(fda);
library(quantreg); library(statmod); library(xtable); library(Cairo);
# --------------------------------------------------
a0 <- 0; b0 <- 1; gn <- 20;
norder <- 4;
grd <- seq(0.1, 0.9, 0.005/5);
qv <- c(which(eleq(0.2, grd)), which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)), which(eleq(0.8, grd)));
lgrd <- length(grd);
# msdata <- MSdata;
# -----------------------------------------------------
#*****************************************************#
# using GACV method to determine optimal nbasis
CBA <- c(1, 2, 3, 4, 5)
BICR <- GACVR <- matrix(0, ncol=length(CBA), nrow=lgrd)
NBS <- rep(0,length(CBA))
n <- dim(MSdata)[1]
cn <- (log(n))^(1/2)
for(i in 1:length(CBA)){
cba <- CBA[i];
res <- predfun(MSdata, a0, b0, gn, time, norder, cba);
TM <- res$TM;
DEL <- res$DEL;
nbasis <- res$nbasis;
ns <- nbasis+1;
n <- dim(MSdata)[1];
pre.y <- res$pre.y;
bicres <- bicfun(n, ns, cn, TM, pre.y, DEL, grd);
GACVR[, i] <- bicres$gacv;
BICR[, i] <- bicres$bic;
NBS[i] <- nbasis;
}
bicres <- optfun(grd, BICR);
gacvres <- optfun(grd, GACVR);
res1 <- rbind(gacvres[2, ], bicres[2, ]);
res1
bicres <- optfun(grd, BICR);
gacvres <- optfun(grd, GACVR);
resoptReal <- rbind(gacvres[2, ], bicres[2, ]);
colnames(resoptReal) <- c("IGACV", "IBIC");
rownames(resoptReal) <- 4:8;
resoptReal
resoptReal <- rbind(gacvres[2, ], bicres[2, ]);
rownames(resoptReal) <- c("IGACV", "IBIC");
colnames(resoptReal) <- 4:8;
resoptReal
rm(list = ls())
library(FCQR);
library(xtable); library(survival); library(fda);
library(quantreg); library(ggplot2); library(MASS);
rm(list = ls())
library(FCQR);
library(xtable); library(survival); library(fda);
library(quantreg); library(ggplot2); library(MASS);
t <- time; zsm <- MSdata[, 3:98];
c0 <- 10;  sdx <- 0.2; sdz <- 1; beta1 <- 0.1; norder <- 4;
# ------------------------------------------------------------
grd <- seq(0.1, 0.9, 0.005/5);
qv <- c(which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)));
bsnb <- c(4, 5, 6, 7, 8);
nsim <- 10; lam0 <- 1 # for 20% censoring rate.
resop = optbasis(nsim, bsnb, zsm, lam0, c0, beta1, sdz, sdx,
grd, t, norder, qv);
resoptb = resop$inopt;
rownames(resoptb) = c("IGACV", "IBIC")
colnames(resoptb) = bsnb;
rm(list = ls())
library(FCQR);
library(xtable); library(survival); library(fda);
library(quantreg); library(ggplot2); library(MASS);
t <- time; zsm <- MSdata[, 3:98];
c0 <- 10;  sdx <- 0.2; sdz <- 1; beta1 <- 0.1; norder <- 4;
# ------------------------------------------------------------
grd <- seq(0.1, 0.9, 0.005/5);
qv <- c(which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)));
bsnb <- c(4, 5, 6, 7, 8);
nsim <- 10; lam0 <- 1 # for 20% censoring rate.
resop = optbasis(nsim, bsnb, zsm, lam0, c0, beta1, sdz, sdx,
grd, t, norder, qv);
resoptb = resop$inopt;
rownames(resoptb) = c("IGACV", "IBIC")
colnames(resoptb) = bsnb;
n <- dim(zsm)[1];
lgrd <- length(grd);
cenrate <- rep(0, length(bsnb))
GACVR <- BICR <- AICR <- array(0, dim = c(nsim, length(bsnb), lgrd))
GACVR.IN <- BICR.IN <- AICR.IN <- matrix(0, nrow = nsim, ncol = length(bsnb))
nbasis <- bsnb[nb];
SIMRES <- Mimicfun(zsm, lam0, c0, beta1, sdz, sdx, nsim,
grd, t, nbasis, norder, qv)
nb  = 1
nbasis <- bsnb[nb];
SIMRES <- Mimicfun(zsm, lam0, c0, beta1, sdz, sdx, nsim,
grd, t, nbasis, norder, qv)
cenrate[nb] <- 1 - mean(colMeans(SIMRES$cdata));
aa1 <- SIMRES$gacvr;
aa2 <- SIMRES$bicr;
aa3 <- SIMRES$aicr;
aa1[which(is.infinite(aa1), arr.ind = TRUE)] <- NA;
aa2[which(is.infinite(aa2), arr.ind = TRUE)] <- NA;
aa3[which(is.infinite(aa3), arr.ind = TRUE)] <- NA;
GACVR[, nb, ] <- aa1;
BICR[, nb, ] <- aa2;
AICR[, nb, ] <- aa3;
# integrate for tau
del.tau <- diff(grd)[1]
GACVR.IN[, nb] <- apply(aa1*del.tau, 1, sum, na.rm = TRUE);
BICR.IN[, nb] <- apply(aa2*del.tau, 1, sum, na.rm = TRUE);
AICR.IN[, nb] <- apply(aa3*del.tau, 1, sum, na.rm = TRUE)
resop = optbasis(nsim, bsnb, zsm, lam0, c0, beta1, sdz, sdx,
grd, t, norder, qv);
rm(list = ls())
library(FCQR);
library(xtable); library(survival); library(fda);
library(quantreg); library(ggplot2); library(MASS);
t <- time; zsm <- MSdata[, 3:98];
c0 <- 10;  sdx <- 0.2; sdz <- 1; beta1 <- 0.1; norder <- 4;
# ------------------------------------------------------------
grd <- seq(0.1, 0.9, 0.005/5);
qv <- c(which(eleq(0.3, grd)), which(eleq(0.4, grd)), which(eleq(0.5, grd)),
which(eleq(0.6, grd)), which(eleq(0.7, grd)));
bsnb <- c(4, 5, 6, 7, 8);
nsim <- 10; lam0 <- 1 # for 20% censoring rate.
resop = optbasis(nsim, bsnb, zsm, lam0, c0, beta1, sdz, sdx,
grd, t, norder, qv);
setwd("~/NutstoreFiles/Nutstore/CQR2revised/Rpackage/FCQR")
library(FCQR)
library(FCQR)
